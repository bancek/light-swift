// Generated by CoffeeScript 1.6.3
(function() {
  var Hasher, LightSwift, MemoryBackend, MemoryStorage, SwiftServer, dataStream, defaultOptions, fs, mime, q, random32, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  q = require('q');

  _ = require('lodash');

  mime = require('mime');

  MemoryStorage = require('./storage/memory');

  MemoryBackend = require('./backend/memory');

  SwiftServer = require('./server/swift');

  _ref = require('./utils'), random32 = _ref.random32, dataStream = _ref.dataStream, Hasher = _ref.Hasher;

  defaultOptions = {
    port: 3002,
    verbose: false
  };

  LightSwift = (function() {
    var BadHashError;

    LightSwift.prototype.BadHashError = BadHashError = (function(_super) {
      __extends(BadHashError, _super);

      function BadHashError() {
        BadHashError.__super__.constructor.apply(this, arguments);
      }

      return BadHashError;

    })(Error);

    function LightSwift(opts) {
      this.server = __bind(this.server, this);
      this.importObjects = __bind(this.importObjects, this);
      this.setObjectMetadata = __bind(this.setObjectMetadata, this);
      this.getObjects = __bind(this.getObjects, this);
      this.getObject = __bind(this.getObject, this);
      this.copyObject = __bind(this.copyObject, this);
      this.objectStream = __bind(this.objectStream, this);
      this.deleteObject = __bind(this.deleteObject, this);
      this.bumpObject = __bind(this.bumpObject, this);
      this.addObject = __bind(this.addObject, this);
      this.createObject = __bind(this.createObject, this);
      this.mergeContainerAcl = __bind(this.mergeContainerAcl, this);
      this.mergeContainerMetadata = __bind(this.mergeContainerMetadata, this);
      this.getContainers = __bind(this.getContainers, this);
      this.getContainer = __bind(this.getContainer, this);
      this.bumpContainer = __bind(this.bumpContainer, this);
      this.deleteContainer = __bind(this.deleteContainer, this);
      this.canDeleteContainer = __bind(this.canDeleteContainer, this);
      this.addContainer = __bind(this.addContainer, this);
      this.getAuthTokenAccount = __bind(this.getAuthTokenAccount, this);
      this.authenticate = __bind(this.authenticate, this);
      this.newAuthToken = __bind(this.newAuthToken, this);
      this.addUser = __bind(this.addUser, this);
      this.mergeAccountMetadata = __bind(this.mergeAccountMetadata, this);
      this.getAccount = __bind(this.getAccount, this);
      this.bumpAccount = __bind(this.bumpAccount, this);
      this.addAccount = __bind(this.addAccount, this);
      this.close = __bind(this.close, this);
      this.connect = __bind(this.connect, this);
      this.options = _.merge({}, defaultOptions, opts);
      this.storage = this.options.storage || new MemoryStorage();
      this.backend = this.options.backend || new MemoryBackend();
    }

    LightSwift.prototype.connect = function() {
      return this.backend.connect();
    };

    LightSwift.prototype.close = function() {
      var _ref1;
      if ((_ref1 = this._server) != null) {
        _ref1.close();
      }
      return this.backend.close();
    };

    LightSwift.prototype.addAccount = function(account) {
      var accountInfo;
      accountInfo = {
        bytesUsed: 0,
        containerCount: 0,
        objectCount: 0,
        metadata: {},
        lastModified: new Date()
      };
      return this.backend.addAccount(account, accountInfo);
    };

    LightSwift.prototype.bumpAccount = function(account) {
      return this.backend.setAccountLastModified(account, new Date());
    };

    LightSwift.prototype.getAccount = function(account) {
      return this.backend.getAccount(account);
    };

    LightSwift.prototype.mergeAccountMetadata = function(account, newMetadata) {
      var _this = this;
      return this.getAccount(account).then(function(accountInfo) {
        var metadata;
        metadata = _.merge({}, accountInfo.metadata, newMetadata);
        return _this.backend.setAccountMetadata(account, metadata).then(function() {
          return _this.bumpAccount(account);
        });
      });
    };

    LightSwift.prototype.addUser = function(account, username, key) {
      return this.backend.addUser(account, username, key);
    };

    LightSwift.prototype.newAuthToken = function(account) {
      var authToken,
        _this = this;
      authToken = 'AUTH_tk' + random32();
      return this.backend.addAuthToken(account, authToken).then(function() {
        return authToken;
      });
    };

    LightSwift.prototype.authenticate = function(user, key) {
      var account, parts, username;
      if ((user == null) || (key == null)) {
        return q(false);
      }
      parts = user.split(':');
      if (!parts.length === 2) {
        return q(false);
      }
      account = parts[0], username = parts[1];
      return this.backend.getUser(account, username).then(function(user) {
        var authenticated;
        authenticated = (user != null ? user.key : void 0) === key;
        return authenticated;
      });
    };

    LightSwift.prototype.getAuthTokenAccount = function(authToken) {
      return this.backend.getAuthTokenAccount(authToken);
    };

    LightSwift.prototype.addContainer = function(account, container, metadata, acl) {
      var containerInfo,
        _this = this;
      if (metadata == null) {
        metadata = {};
      }
      containerInfo = {
        bytesUsed: 0,
        objectCount: 0,
        metadata: metadata,
        acl: acl,
        lastModified: new Date()
      };
      return this.backend.addContainer(account, container, containerInfo).then(function() {
        return _this.backend.accountAddContainer(account).then(_this.bumpAccount(account));
      });
    };

    LightSwift.prototype.canDeleteContainer = function(containerInfo) {
      return containerInfo.objectCount === 0;
    };

    LightSwift.prototype.deleteContainer = function(account, container) {
      var _this = this;
      return this.backend.deleteContainer(account, container).then(function() {
        return _this.backend.accountDeleteContainer(account).then(_this.bumpAccount(account));
      });
    };

    LightSwift.prototype.bumpContainer = function(account, container) {
      return this.backend.setContainerLastModified(account, container, new Date());
    };

    LightSwift.prototype.getContainer = function(account, container) {
      return this.backend.getContainer(account, container);
    };

    LightSwift.prototype.getContainers = function(account) {
      return this.backend.getContainers(account);
    };

    LightSwift.prototype.mergeContainerMetadata = function(account, container, newMetadata) {
      var _this = this;
      return this.getContainer(account, container).then(function(containerInfo) {
        var metadata;
        metadata = _.merge({}, containerInfo.metadata, newMetadata);
        return _this.backend.setContainerMetadata(account, container, metadata).then(function() {
          return _this.bumpContainer(account, container);
        });
      });
    };

    LightSwift.prototype.mergeContainerAcl = function(account, container, newAcl) {
      var _this = this;
      return this.getContainer(account, container).then(function(containerInfo) {
        var acl;
        acl = _.merge({}, containerInfo.acl, newAcl);
        return _this.backend.setContainerAcl(account, container, acl).then(function() {
          return _this.bumpContainer(account, container);
        });
      });
    };

    LightSwift.prototype.createObject = function(account, container, object, obj, stream) {
      var hasher,
        _this = this;
      hasher = new Hasher();
      stream = stream.pipe(hasher);
      return this.storage.create(stream).then(function(res) {
        if (obj.hash != null) {
          if (obj.hash !== hasher.hash) {
            return _this.storage.remove(res.object).then(function() {
              throw new BadHashError("Bad hash");
            });
          }
        } else {
          obj.hash = hasher.hash;
        }
        obj.object = res.object;
        obj.contentLength = res.size;
        return _this.addObject(account, container, object, obj);
      });
    };

    LightSwift.prototype.addObject = function(account, container, object, obj) {
      var deleted,
        _this = this;
      deleted = this.deleteObject(account, container, object).fail(function() {});
      return deleted.then(function() {
        if (obj.metadata == null) {
          obj.metadata = {};
        }
        if (obj.contentType == null) {
          obj.contentType = mime.lookup(object);
        }
        if (obj.lastModified == null) {
          obj.lastModified = new Date();
        }
        if (obj.hash == null) {
          obj.hash = random32();
        }
        return _this.backend.addObject(account, container, object, obj).then(function() {
          return _this.backend.accountAddObject(account, obj.contentLength).then(_this.backend.containerAddObject(account, container, obj.contentLength)).then(_this.bumpAccount(account)).then(_this.bumpContainer(account, container)).then(function() {
            return obj;
          });
        });
      });
    };

    LightSwift.prototype.bumpObject = function(account, container, object) {
      return this.backend.setObjectLastModified(account, container, object, new Date());
    };

    LightSwift.prototype.deleteObject = function(account, container, object) {
      var _this = this;
      return this.backend.deleteObject(account, container, object).then(function(obj) {
        return _this.storage.remove(obj.object).then(function() {
          return _this.backend.accountDeleteObject(account, obj.contentLength).then(_this.backend.containerDeleteObject(account, container, obj.contentLength)).then(_this.bumpAccount(account)).then(_this.bumpContainer(account, container));
        });
      });
    };

    LightSwift.prototype.objectStream = function(obj, range) {
      return this.storage.get(obj.object, range);
    };

    LightSwift.prototype.copyObject = function(account, container, object, obj) {
      var _this = this;
      return this.objectStream(obj).then(function(stream) {
        return _this.createObject(account, container, object, obj, stream);
      });
    };

    LightSwift.prototype.getObject = function(account, container, object) {
      return this.backend.getObject(account, container, object);
    };

    LightSwift.prototype.getObjects = function(account, container) {
      return this.backend.getObjects(account, container);
    };

    LightSwift.prototype.setObjectMetadata = function(account, container, object, newMetadata) {
      var _this = this;
      if (newMetadata == null) {
        newMetadata = {};
      }
      return this.backend.setObjectMetadata(account, container, object, newMetadata).then(function() {
        return _this.bumpObject(account, container, object);
      });
    };

    LightSwift.prototype.importObjects = function(account, container, objects) {
      var allCreated,
        _this = this;
      if (objects.length == null) {
        objects = [objects];
      }
      allCreated = objects.map(function(obj) {
        var name, stream;
        stream = dataStream(obj.content);
        delete obj.content;
        name = obj.name;
        delete obj.name;
        return _this.createObject(account, container, name, obj, stream);
      });
      return q.all(allCreated);
    };

    LightSwift.prototype.server = function() {
      this._server = new SwiftServer(this);
      this._server.listen();
      return this._server;
    };

    return LightSwift;

  })();

  module.exports = LightSwift;

}).call(this);
