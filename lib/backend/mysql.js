// Generated by CoffeeScript 1.6.3
(function() {
  var MysqlBackend, mysql, q, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require('q');

  _ = require('lodash');

  mysql = require('mysql');

  MysqlBackend = (function() {
    function MysqlBackend(url) {
      this.setObjectMetadata = __bind(this.setObjectMetadata, this);
      this.getObjects = __bind(this.getObjects, this);
      this.getObject = __bind(this.getObject, this);
      this._rowToObject = __bind(this._rowToObject, this);
      this.deleteObject = __bind(this.deleteObject, this);
      this.setObjectLastModified = __bind(this.setObjectLastModified, this);
      this.addObject = __bind(this.addObject, this);
      this.containerDeleteObject = __bind(this.containerDeleteObject, this);
      this.containerAddObject = __bind(this.containerAddObject, this);
      this.setContainerAcl = __bind(this.setContainerAcl, this);
      this.setContainerMetadata = __bind(this.setContainerMetadata, this);
      this.getContainers = __bind(this.getContainers, this);
      this.getContainer = __bind(this.getContainer, this);
      this._rowToContainer = __bind(this._rowToContainer, this);
      this.setContainerLastModified = __bind(this.setContainerLastModified, this);
      this.deleteContainer = __bind(this.deleteContainer, this);
      this.addContainer = __bind(this.addContainer, this);
      this.getAuthTokenAccount = __bind(this.getAuthTokenAccount, this);
      this.addAuthToken = __bind(this.addAuthToken, this);
      this.getUser = __bind(this.getUser, this);
      this.addUser = __bind(this.addUser, this);
      this.accountDeleteObject = __bind(this.accountDeleteObject, this);
      this.accountAddObject = __bind(this.accountAddObject, this);
      this.accountDeleteContainer = __bind(this.accountDeleteContainer, this);
      this.accountAddContainer = __bind(this.accountAddContainer, this);
      this.setAccountMetadata = __bind(this.setAccountMetadata, this);
      this.getAccount = __bind(this.getAccount, this);
      this.setAccountLastModified = __bind(this.setAccountLastModified, this);
      this.addAccount = __bind(this.addAccount, this);
      this.close = __bind(this.close, this);
      this.createObjectTable = __bind(this.createObjectTable, this);
      this.createContainerTable = __bind(this.createContainerTable, this);
      this.createAuthTokensTable = __bind(this.createAuthTokensTable, this);
      this.createAuthTable = __bind(this.createAuthTable, this);
      this.createAccountTable = __bind(this.createAccountTable, this);
      this.connect = __bind(this.connect, this);
      this.databaseUrl = url || 'mysql://lightswift:lightswift@localhost/lightswift?charset=utf8';
    }

    MysqlBackend.prototype.connect = function() {
      this.pool = mysql.createPool(this.databaseUrl);
      return q.all([this.createAccountTable(), this.createAuthTable(), this.createAuthTokensTable(), this.createContainerTable(), this.createObjectTable()]);
    };

    MysqlBackend.prototype.createAccountTable = function() {
      return q.ninvoke(this.pool, 'query', 'CREATE TABLE IF NOT EXISTS `account` (\n  `account` varchar(255) NOT NULL,\n  `bytes_used` BIGINT unsigned NOT NULL,\n  `container_count` BIGINT unsigned NOT NULL,\n  `object_count` BIGINT unsigned NOT NULL,\n  `last_modified` BIGINT unsigned NOT NULL,\n  `metadata` BLOB NOT NULL,\n  PRIMARY KEY (`account`)\n) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;');
    };

    MysqlBackend.prototype.createAuthTable = function() {
      return q.ninvoke(this.pool, 'query', 'CREATE TABLE IF NOT EXISTS `auth` (\n  `account` varchar(255) NOT NULL,\n  `username` varchar(255) NOT NULL,\n  `key` varchar(255) NOT NULL,\n  PRIMARY KEY (`account`, `username`)\n) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;');
    };

    MysqlBackend.prototype.createAuthTokensTable = function() {
      return q.ninvoke(this.pool, 'query', 'CREATE TABLE IF NOT EXISTS `authtoken` (\n  `token` varchar(255) NOT NULL,\n  `account` varchar(255) NOT NULL,\n  PRIMARY KEY (`token`)\n) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;');
    };

    MysqlBackend.prototype.createContainerTable = function() {
      return q.ninvoke(this.pool, 'query', 'CREATE TABLE IF NOT EXISTS `container` (\n  `account` varchar(255) NOT NULL,\n  `container` varchar(255) NOT NULL,\n  `bytes_used` BIGINT unsigned NOT NULL,\n  `object_count` BIGINT unsigned NOT NULL,\n  `last_modified` BIGINT unsigned NOT NULL,\n  `metadata` BLOB NOT NULL,\n  `acl_read` varchar(255),\n  `acl_write` varchar(255),\n  PRIMARY KEY (`account`, `container`)\n) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;');
    };

    MysqlBackend.prototype.createObjectTable = function() {
      return q.ninvoke(this.pool, 'query', 'CREATE TABLE IF NOT EXISTS `object` (\n  `account` varchar(255) NOT NULL,\n  `container` varchar(255) NOT NULL,\n  `object` varchar(255) NOT NULL,\n  `backend_object` varchar(255) NOT NULL,\n  `content_type` varchar(255) NOT NULL,\n  `hash` varchar(255) NOT NULL,\n  `content_length` BIGINT unsigned NOT NULL,\n  `last_modified` BIGINT unsigned NOT NULL,\n  `metadata` BLOB NOT NULL,\n  PRIMARY KEY (`account`, `container`, `object`)\n) ENGINE=InnoDB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;');
    };

    MysqlBackend.prototype.close = function() {
      if (!this.pool) {
        return q();
      }
      return q.ninvoke(this.pool, 'end');
    };

    MysqlBackend.prototype.addAccount = function(account, accountInfo) {
      return q.ninvoke(this.pool, 'query', 'INSERT INTO `account` (\n  `account`,\n  `bytes_used`,\n  `container_count`,\n  `object_count`,\n  `last_modified`,\n  `metadata`\n) VALUES (?, ?, ?, ?, ?, ?)', [account, accountInfo.bytesUsed, accountInfo.containerCount, accountInfo.objectCount, accountInfo.lastModified.getTime(), JSON.stringify(accountInfo.metadata)]);
    };

    MysqlBackend.prototype.setAccountLastModified = function(account, lastModified) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `last_modified` = ?\nWHERE\n  `account` = ?', [lastModified.getTime(), account]);
    };

    MysqlBackend.prototype.getAccount = function(account) {
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `bytes_used`,\n  `container_count`,\n  `object_count`,\n  `last_modified`,\n  `metadata`\nFROM `account`\nWHERE\n  `account` = ?', [account]).then(function(rows) {
        var res;
        res = rows[0][0];
        if (!res) {
          return;
        }
        return {
          bytesUsed: res.bytes_used,
          containerCount: res.container_count,
          objectCount: res.object_count,
          lastModified: new Date(res.last_modified),
          metadata: JSON.parse(res.metadata)
        };
      });
    };

    MysqlBackend.prototype.setAccountMetadata = function(account, metadata) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `metadata` = ?\nWHERE\n  `account` = ?', [JSON.stringify(metadata), account]);
    };

    MysqlBackend.prototype.accountAddContainer = function(account) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `container_count` = `container_count` + 1\nWHERE\n  `account` = ?', [account]);
    };

    MysqlBackend.prototype.accountDeleteContainer = function(account) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `container_count` = `container_count` - 1\nWHERE\n  `account` = ?', [account]);
    };

    MysqlBackend.prototype.accountAddObject = function(account, size) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `bytes_used` = `bytes_used` + ?,\n  `object_count` = `object_count` + 1\nWHERE\n  `account` = ?', [size, account]);
    };

    MysqlBackend.prototype.accountDeleteObject = function(account, size) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `account`\nSET\n  `bytes_used` = `bytes_used` - ?,\n  `object_count` = `object_count` - 1\nWHERE\n  `account` = ?', [size, account]);
    };

    MysqlBackend.prototype.addUser = function(account, username, key) {
      return q.ninvoke(this.pool, 'query', 'INSERT INTO `auth` (\n  `account`,\n  `username`,\n  `key`\n) VALUES (?, ?, ?)', [account, username, key]);
    };

    MysqlBackend.prototype.getUser = function(account, username) {
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `key`\nFROM `auth`\nWHERE\n  `account` = ? AND\n  `username` = ?', [account, username]).then(function(rows) {
        var res;
        res = rows[0][0];
        if (!res) {
          return;
        }
        return {
          key: res.key
        };
      });
    };

    MysqlBackend.prototype.addAuthToken = function(account, authToken) {
      return q.ninvoke(this.pool, 'query', 'INSERT INTO `authtoken` (\n  `token`,\n  `account`\n) VALUES (?, ?)', [authToken, account]);
    };

    MysqlBackend.prototype.getAuthTokenAccount = function(authToken) {
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `account`\nFROM `authtoken`\nWHERE\n  `token` = ?', [authToken]).then(function(rows) {
        var res;
        res = rows[0][0];
        if (!res) {
          return;
        }
        return res.account;
      });
    };

    MysqlBackend.prototype.addContainer = function(account, container, containerInfo) {
      return q.ninvoke(this.pool, 'query', 'INSERT INTO `container` (\n  `account`,\n  `container`,\n  `bytes_used`,\n  `object_count`,\n  `last_modified`,\n  `metadata`,\n  `acl_read`,\n  `acl_write`\n) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', [account, container, containerInfo.bytesUsed, containerInfo.objectCount, containerInfo.lastModified.getTime(), JSON.stringify(containerInfo.metadata), null, null]);
    };

    MysqlBackend.prototype.deleteContainer = function(account, container) {
      return q.ninvoke(this.pool, 'query', 'DELETE FROM `container`\nWHERE\n  `account` = ? AND\n  `container` = ?', [account, container]);
    };

    MysqlBackend.prototype.setContainerLastModified = function(account, container, lastModified) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `container`\nSET\n  `last_modified` = ?\nWHERE\n  `account` = ? AND\n  `container` = ?', [lastModified.getTime(), account, container]);
    };

    MysqlBackend.prototype._rowToContainer = function(row) {
      return {
        bytesUsed: row.bytes_used,
        objectCount: row.object_count,
        lastModified: new Date(row.last_modified),
        metadata: JSON.parse(row.metadata),
        acl: {
          read: row.acl_read,
          write: row.acl_write
        }
      };
    };

    MysqlBackend.prototype.getContainer = function(account, container) {
      var _this = this;
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `bytes_used`,\n  `object_count`,\n  `last_modified`,\n  `metadata`,\n  `acl_read`,\n  `acl_write`\nFROM `container`\nWHERE\n  `account` = ? AND\n  `container` = ?', [account, container]).then(function(rows) {
        var res;
        res = rows[0][0];
        if (!res) {
          return;
        }
        return _this._rowToContainer(res);
      });
    };

    MysqlBackend.prototype.getContainers = function(account) {
      var _this = this;
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `container`,\n  `bytes_used`,\n  `object_count`,\n  `last_modified`,\n  `metadata`,\n  `acl_read`,\n  `acl_write`\nFROM `container`\nWHERE\n  `account` = ?', [account]).then(function(rows) {
        var res;
        res = rows[0];
        return _(res).map(function(x) {
          return [x.container, _this._rowToContainer(x)];
        }).object().value();
      });
    };

    MysqlBackend.prototype.setContainerMetadata = function(account, container, metadata) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `container`\nSET\n  `metadata` = ?\nWHERE\n  `account` = ? AND\n  `container` = ?', [JSON.stringify(metadata), account, container]);
    };

    MysqlBackend.prototype.setContainerAcl = function(account, container, acl) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `container`\nSET\n  `acl_read` = ?,\n  `acl_write` = ?\nWHERE\n  `account` = ? AND\n  `container` = ?', [acl.read, acl.write, account, container]);
    };

    MysqlBackend.prototype.containerAddObject = function(account, container, size) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `container`\nSET\n  `bytes_used` = `bytes_used` + ?,\n  `object_count` = `object_count` + 1\nWHERE\n  `account` = ? AND\n  `container` = ?', [size, account, container]);
    };

    MysqlBackend.prototype.containerDeleteObject = function(account, container, size) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `container`\nSET\n  `bytes_used` = `bytes_used` - ?,\n  `object_count` = `object_count` - 1\nWHERE\n  `account` = ? AND\n  `container` = ?', [size, account, container]);
    };

    MysqlBackend.prototype.addObject = function(account, container, object, obj) {
      return q.ninvoke(this.pool, 'query', 'INSERT INTO `object` (\n  `account`,\n  `container`,\n  `object`,\n  `backend_object`,\n  `content_type`,\n  `hash`,\n  `content_length`,\n  `last_modified`,\n  `metadata`\n) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', [account, container, object, obj.object, obj.contentType, obj.hash, obj.contentLength, obj.lastModified.getTime(), JSON.stringify(obj.metadata)]);
    };

    MysqlBackend.prototype.setObjectLastModified = function(account, container, object, lastModified) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `object`\nSET\n  `last_modified` = ?\nWHERE\n  `account` = ? AND\n  `container` = ? AND\n  `object` = ?', [lastModified.getTime(), account, container, object]);
    };

    MysqlBackend.prototype.deleteObject = function(account, container, object) {
      return q.ninvoke(this.pool, 'query', 'DELETE FROM `object`\nWHERE\n  `account` = ? AND\n  `container` = ? AND\n  `object` = ?', [account, container, object]);
    };

    MysqlBackend.prototype._rowToObject = function(row) {
      return {
        object: row.backend_object,
        contentType: row.content_type,
        hash: row.hash,
        contentLength: row.content_length,
        lastModified: new Date(row.last_modified),
        metadata: JSON.parse(row.metadata)
      };
    };

    MysqlBackend.prototype.getObject = function(account, container, object) {
      var _this = this;
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `backend_object`,\n  `content_type`,\n  `hash`,\n  `content_length`,\n  `last_modified`,\n  `metadata`\nFROM `object`\nWHERE\n  `account` = ? AND\n  `container` = ? AND\n  `object` = ?', [account, container, object]).then(function(rows) {
        var res;
        res = rows[0][0];
        if (!res) {
          return;
        }
        return _this._rowToObject(res);
      });
    };

    MysqlBackend.prototype.getObjects = function(account, container) {
      var _this = this;
      return q.ninvoke(this.pool, 'query', 'SELECT\n  `object`,\n  `backend_object`,\n  `content_type`,\n  `hash`,\n  `content_length`,\n  `last_modified`,\n  `metadata`\nFROM `object`\nWHERE\n  `account` = ? AND\n  `container` = ?', [account, container]).then(function(rows) {
        var res;
        res = rows[0];
        return _(res).map(function(x) {
          return [x.object, _this._rowToObject(x)];
        }).object().value();
      });
    };

    MysqlBackend.prototype.setObjectMetadata = function(account, container, object, metadata) {
      return q.ninvoke(this.pool, 'query', 'UPDATE `object`\nSET\n  `metadata` = ?\nWHERE\n  `account` = ? AND\n  `container` = ? AND\n  `object` = ?', [JSON.stringify(metadata), account, container, object]);
    };

    return MysqlBackend;

  })();

  module.exports = MysqlBackend;

}).call(this);
