// Generated by CoffeeScript 1.6.3
(function() {
  var MemoryBackend, q, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require('q');

  _ = require('lodash');

  MemoryBackend = (function() {
    function MemoryBackend() {
      this.setObjectMetadata = __bind(this.setObjectMetadata, this);
      this.getObjects = __bind(this.getObjects, this);
      this.getObject = __bind(this.getObject, this);
      this.deleteObject = __bind(this.deleteObject, this);
      this.setObjectLastModified = __bind(this.setObjectLastModified, this);
      this.addObject = __bind(this.addObject, this);
      this.containerDeleteObject = __bind(this.containerDeleteObject, this);
      this.containerAddObject = __bind(this.containerAddObject, this);
      this.setContainerAcl = __bind(this.setContainerAcl, this);
      this.setContainerMetadata = __bind(this.setContainerMetadata, this);
      this.getContainers = __bind(this.getContainers, this);
      this.getContainer = __bind(this.getContainer, this);
      this.setContainerLastModified = __bind(this.setContainerLastModified, this);
      this.deleteContainer = __bind(this.deleteContainer, this);
      this.addContainer = __bind(this.addContainer, this);
      this.getAuthTokenAccount = __bind(this.getAuthTokenAccount, this);
      this.addAuthToken = __bind(this.addAuthToken, this);
      this.getUser = __bind(this.getUser, this);
      this.addUser = __bind(this.addUser, this);
      this.accountDeleteObject = __bind(this.accountDeleteObject, this);
      this.accountAddObject = __bind(this.accountAddObject, this);
      this.accountDeleteContainer = __bind(this.accountDeleteContainer, this);
      this.accountAddContainer = __bind(this.accountAddContainer, this);
      this.setAccountMetadata = __bind(this.setAccountMetadata, this);
      this.getAccount = __bind(this.getAccount, this);
      this.setAccountLastModified = __bind(this.setAccountLastModified, this);
      this.addAccount = __bind(this.addAccount, this);
      this.accountsStore = {};
      this.usersStore = {};
      this.authTokensStore = {};
      this.containersStore = {};
      this.objectsStore = {};
    }

    MemoryBackend.prototype.connect = function() {
      return q();
    };

    MemoryBackend.prototype.close = function() {
      return q();
    };

    MemoryBackend.prototype.addAccount = function(account, accountInfo) {
      this.accountsStore[account] = accountInfo;
      this.usersStore[account] = {};
      this.containersStore[account] = {};
      this.objectsStore[account] = {};
      return q();
    };

    MemoryBackend.prototype.setAccountLastModified = function(account, lastModified) {
      this.accountsStore[account].lastModified = lastModified;
      return q();
    };

    MemoryBackend.prototype.getAccount = function(account) {
      var accountInfo;
      accountInfo = this.accountsStore[account];
      return q(accountInfo);
    };

    MemoryBackend.prototype.setAccountMetadata = function(account, metadata) {
      var _this = this;
      return this.getAccount(account).then(function(accountInfo) {
        return accountInfo.metadata = metadata;
      });
    };

    MemoryBackend.prototype.accountAddContainer = function(account) {
      this.accountsStore[account].containerCount++;
      return q();
    };

    MemoryBackend.prototype.accountDeleteContainer = function(account) {
      this.accountsStore[account].containerCount--;
      return q();
    };

    MemoryBackend.prototype.accountAddObject = function(account, size) {
      this.accountsStore[account].objectCount++;
      this.accountsStore[account].bytesUsed += size;
      return q();
    };

    MemoryBackend.prototype.accountDeleteObject = function(account, size) {
      this.accountsStore[account].objectCount--;
      this.accountsStore[account].bytesUsed -= size;
      return q();
    };

    MemoryBackend.prototype.addUser = function(account, username, key) {
      this.usersStore[account][username] = {
        key: key
      };
      return q();
    };

    MemoryBackend.prototype.getUser = function(account, username) {
      var user, _ref;
      user = (_ref = this.usersStore[account]) != null ? _ref[username] : void 0;
      return q(user);
    };

    MemoryBackend.prototype.addAuthToken = function(account, authToken) {
      this.authTokensStore[authToken] = account;
      return q();
    };

    MemoryBackend.prototype.getAuthTokenAccount = function(authToken) {
      var account;
      account = this.authTokensStore[authToken];
      return q(account);
    };

    MemoryBackend.prototype.addContainer = function(account, container, containerInfo) {
      this.containersStore[account][container] = containerInfo;
      this.objectsStore[account][container] = {};
      return q();
    };

    MemoryBackend.prototype.deleteContainer = function(account, container) {
      delete this.objectsStore[account][container];
      delete this.containersStore[account][container];
      return q();
    };

    MemoryBackend.prototype.setContainerLastModified = function(account, container, lastModified) {
      this.containersStore[account][container].lastModified = lastModified;
      return q();
    };

    MemoryBackend.prototype.getContainer = function(account, container) {
      var containerInfo;
      containerInfo = this.containersStore[account][container];
      return q(containerInfo);
    };

    MemoryBackend.prototype.getContainers = function(account) {
      var containerInfos;
      containerInfos = this.containersStore[account];
      return q(containerInfos);
    };

    MemoryBackend.prototype.setContainerMetadata = function(account, container, metadata) {
      var _this = this;
      return this.getContainer(account, container).then(function(containerInfo) {
        return containerInfo.metadata = metadata;
      });
    };

    MemoryBackend.prototype.setContainerAcl = function(account, container, acl) {
      var _this = this;
      return this.getContainer(account, container).then(function(containerInfo) {
        return containerInfo.acl = acl;
      });
    };

    MemoryBackend.prototype.containerAddObject = function(account, container, size) {
      this.containersStore[account][container].objectCount++;
      this.containersStore[account][container].bytesUsed += size;
      return q();
    };

    MemoryBackend.prototype.containerDeleteObject = function(account, container, size) {
      this.containersStore[account][container].objectCount--;
      this.containersStore[account][container].bytesUsed -= size;
      return q();
    };

    MemoryBackend.prototype.addObject = function(account, container, object, obj) {
      this.objectsStore[account][container][object] = obj;
      return q();
    };

    MemoryBackend.prototype.setObjectLastModified = function(account, container, object, lastModified) {
      this.objectsStore[account][container][object].lastModified = lastModified;
      return q();
    };

    MemoryBackend.prototype.deleteObject = function(account, container, object) {
      var obj;
      obj = this.objectsStore[account][container][object];
      delete this.objectsStore[account][container][object];
      return q(obj);
    };

    MemoryBackend.prototype.getObject = function(account, container, object) {
      var _ref;
      object = (_ref = this.objectsStore[account][container]) != null ? _ref[object] : void 0;
      return q(object);
    };

    MemoryBackend.prototype.getObjects = function(account, container) {
      var objects;
      objects = this.objectsStore[account][container];
      return q(objects);
    };

    MemoryBackend.prototype.setObjectMetadata = function(account, container, object, metadata) {
      var _this = this;
      return this.getObject(account, container, object).then(function(object) {
        return object.metadata = metadata;
      });
    };

    return MemoryBackend;

  })();

  module.exports = MemoryBackend;

}).call(this);
