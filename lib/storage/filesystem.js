// Generated by CoffeeScript 1.6.3
(function() {
  var Duplex, FilesystemStorage, fs, path, q, random32, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require('q');

  path = require('path');

  fs = require('fs');

  _ref = require('../utils'), random32 = _ref.random32, Duplex = _ref.Duplex;

  FilesystemStorage = (function() {
    function FilesystemStorage(path) {
      this.remove = __bind(this.remove, this);
      this.create = __bind(this.create, this);
      this.get = __bind(this.get, this);
      this.path = path;
      this.objects = {};
    }

    FilesystemStorage.prototype.getPath = function(object) {
      return path.join(this.path, object);
    };

    FilesystemStorage.prototype.get = function(object, range) {
      var filename;
      filename = this.getPath(object);
      return q.nfcall(fs.stat, filename).then(function() {
        var defer, stream;
        defer = q.defer();
        stream = fs.createReadStream(filename, range);
        stream.on('open', function() {
          return defer.resolve(stream);
        });
        stream.on('error', function(err) {
          return defer.reject(err);
        });
        return defer.promise;
      });
    };

    FilesystemStorage.prototype.create = function(stream) {
      var defer, fileStream, filename, name, size,
        _this = this;
      defer = q.defer();
      name = random32();
      filename = this.getPath(name);
      fileStream = fs.createWriteStream(filename);
      size = 0;
      stream.pipe(fileStream);
      stream.on('data', function(data) {
        return size += data.length;
      });
      stream.on('end', function() {
        return defer.resolve({
          object: name,
          size: size
        });
      });
      return defer.promise;
    };

    FilesystemStorage.prototype.remove = function(object) {
      var filename;
      filename = this.getPath(object);
      return q.nfcall(fs.unlink, filename);
    };

    return FilesystemStorage;

  })();

  module.exports = FilesystemStorage;

}).call(this);
