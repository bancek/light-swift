// Generated by CoffeeScript 1.6.3
(function() {
  var Duplex, Hasher, crypto, dataStream, random32, stream, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  stream = require('stream');

  crypto = require('crypto');

  _ = require('lodash');

  random32 = function() {
    return _.range(32).map(function() {
      return (Math.random() * 16 >> 0).toString(16);
    }).join('');
  };

  dataStream = function(data) {
    stream = new Duplex();
    stream.write(data);
    stream.end();
    return stream;
  };

  Duplex = (function(_super) {
    __extends(Duplex, _super);

    function Duplex() {
      _ref = Duplex.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Duplex.prototype._transform = function(chunk, encoding, cb) {
      this.push(chunk);
      return cb();
    };

    return Duplex;

  })(stream.Transform);

  Hasher = (function(_super) {
    __extends(Hasher, _super);

    function Hasher(options) {
      this._flush = __bind(this._flush, this);
      this._transform = __bind(this._transform, this);
      Hasher.__super__.constructor.call(this);
      this.md5sum = crypto.createHash('md5');
      this.md5sum.update('');
      this.hash = null;
    }

    Hasher.prototype._transform = function(chunk, encoding, done) {
      this.md5sum.update(chunk);
      this.push(chunk);
      return done();
    };

    Hasher.prototype._flush = function(done) {
      this.hash = this.md5sum.digest('hex');
      return done();
    };

    return Hasher;

  })(stream.Transform);

  Hasher.hashArray = function(arr) {
    var md5sum;
    md5sum = crypto.createHash('md5');
    arr.forEach(function(txt) {
      return md5sum.update(txt);
    });
    return md5sum.digest('hex');
  };

  exports.random32 = random32;

  exports.dataStream = dataStream;

  exports.Duplex = Duplex;

  exports.Hasher = Hasher;

}).call(this);
